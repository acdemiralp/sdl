#pragma once

#include <cstdint>
#include <type_traits>

#include <SDL_keycode.h>

#include <sdl/bitset_enum.hpp>
#include <sdl/scan_code.hpp>

namespace sdl
{
inline constexpr std::int32_t scan_code_mask = SDLK_SCANCODE_MASK;

enum class key_code
{
  unknown                      = SDLK_UNKNOWN,
  _return                      = SDLK_RETURN,
  escape                       = SDLK_ESCAPE,
  backspace                    = SDLK_BACKSPACE,
  tab                          = SDLK_TAB,
  space                        = SDLK_SPACE,
  exclaim                      = SDLK_EXCLAIM,
  quotedbl                     = SDLK_QUOTEDBL,
  hash                         = SDLK_HASH,
  percent                      = SDLK_PERCENT,
  dollar                       = SDLK_DOLLAR,
  ampersand                    = SDLK_AMPERSAND,
  quote                        = SDLK_QUOTE,
  left_parenthesis             = SDLK_LEFTPAREN,
  right_parenthesis            = SDLK_RIGHTPAREN,
  asterisk                     = SDLK_ASTERISK,
  plus                         = SDLK_PLUS,
  comma                        = SDLK_COMMA,
  minus                        = SDLK_MINUS,
  period                       = SDLK_PERIOD,
  slash                        = SDLK_SLASH,
  _0                           = SDLK_0,
  _1                           = SDLK_1,
  _2                           = SDLK_2,
  _3                           = SDLK_3,
  _4                           = SDLK_4,
  _5                           = SDLK_5,
  _6                           = SDLK_6,
  _7                           = SDLK_7,
  _8                           = SDLK_8,
  _9                           = SDLK_9,
  colon                        = SDLK_COLON,
  semicolon                    = SDLK_SEMICOLON,
  less                         = SDLK_LESS,
  equals                       = SDLK_EQUALS,
  greater                      = SDLK_GREATER,
  question                     = SDLK_QUESTION,
  at                           = SDLK_AT,
  left_bracket                 = SDLK_LEFTBRACKET,
  backslash                    = SDLK_BACKSLASH,
  right_bracket                = SDLK_RIGHTBRACKET,
  caret                        = SDLK_CARET,
  underscore                   = SDLK_UNDERSCORE,
  backquote                    = SDLK_BACKQUOTE,
  a                            = SDLK_a,
  b                            = SDLK_b,
  c                            = SDLK_c,
  d                            = SDLK_d,
  e                            = SDLK_e,
  f                            = SDLK_f,
  g                            = SDLK_g,
  h                            = SDLK_h,
  i                            = SDLK_i,
  j                            = SDLK_j,
  k                            = SDLK_k,
  l                            = SDLK_l,
  m                            = SDLK_m,
  n                            = SDLK_n,
  o                            = SDLK_o,
  p                            = SDLK_p,
  q                            = SDLK_q,
  r                            = SDLK_r,
  s                            = SDLK_s,
  t                            = SDLK_t,
  u                            = SDLK_u,
  v                            = SDLK_v,
  w                            = SDLK_w,
  x                            = SDLK_x,
  y                            = SDLK_y,
  z                            = SDLK_z,
  caps_lock                    = SDLK_CAPSLOCK,
  f1                           = SDLK_F1,
  f2                           = SDLK_F2,
  f3                           = SDLK_F3,
  f4                           = SDLK_F4,
  f5                           = SDLK_F5,
  f6                           = SDLK_F6,
  f7                           = SDLK_F7,
  f8                           = SDLK_F8,
  f9                           = SDLK_F9,
  f10                          = SDLK_F10,
  f11                          = SDLK_F11,
  f12                          = SDLK_F12,
  print_screen                 = SDLK_PRINTSCREEN,
  scroll_lock                  = SDLK_SCROLLLOCK,
  pause                        = SDLK_PAUSE,
  insert                       = SDLK_INSERT,
  home                         = SDLK_HOME,
  page_up                      = SDLK_PAGEUP,
  _delete                      = SDLK_DELETE,
  end                          = SDLK_END,
  page_down                    = SDLK_PAGEDOWN,
  right                        = SDLK_RIGHT,
  left                         = SDLK_LEFT,
  down                         = SDLK_DOWN,
  up                           = SDLK_UP,
  num_lock_clear               = SDLK_NUMLOCKCLEAR,
  keypad_divide                = SDLK_KP_DIVIDE,
  keypad_multiply              = SDLK_KP_MULTIPLY,
  keypad_minus                 = SDLK_KP_MINUS,
  keypad_plus                  = SDLK_KP_PLUS,
  keypad_enter                 = SDLK_KP_ENTER,
  keypad_1                     = SDLK_KP_1,
  keypad_2                     = SDLK_KP_2,
  keypad_3                     = SDLK_KP_3,
  keypad_4                     = SDLK_KP_4,
  keypad_5                     = SDLK_KP_5,
  keypad_6                     = SDLK_KP_6,
  keypad_7                     = SDLK_KP_7,
  keypad_8                     = SDLK_KP_8,
  keypad_9                     = SDLK_KP_9,
  keypad_0                     = SDLK_KP_0,
  keypad_period                = SDLK_KP_PERIOD,
  application                  = SDLK_APPLICATION,
  power                        = SDLK_POWER,
  keypad_equals                = SDLK_KP_EQUALS,
  f13                          = SDLK_F13,
  f14                          = SDLK_F14,
  f15                          = SDLK_F15,
  f16                          = SDLK_F16,
  f17                          = SDLK_F17,
  f18                          = SDLK_F18,
  f19                          = SDLK_F19,
  f20                          = SDLK_F20,
  f21                          = SDLK_F21,
  f22                          = SDLK_F22,
  f23                          = SDLK_F23,
  f24                          = SDLK_F24,
  execute                      = SDLK_EXECUTE,
  help                         = SDLK_HELP,
  menu                         = SDLK_MENU,
  select                       = SDLK_SELECT,
  stop                         = SDLK_STOP,
  again                        = SDLK_AGAIN,
  undo                         = SDLK_UNDO,
  cut                          = SDLK_CUT,
  copy                         = SDLK_COPY,
  paste                        = SDLK_PASTE,
  find                         = SDLK_FIND,
  mute                         = SDLK_MUTE,
  volume_up                    = SDLK_VOLUMEUP,
  volume_down                  = SDLK_VOLUMEDOWN,
  keypad_comma                 = SDLK_KP_COMMA,
  keypad_equals_as_400         = SDLK_KP_EQUALSAS400,
  alt_erase                    = SDLK_ALTERASE,
  sys_req                      = SDLK_SYSREQ,
  cancel                       = SDLK_CANCEL,
  clear                        = SDLK_CLEAR,
  prior                        = SDLK_PRIOR,
  return_2                     = SDLK_RETURN2,
  separator                    = SDLK_SEPARATOR,
  out                          = SDLK_OUT,
  oper                         = SDLK_OPER,
  clear_again                  = SDLK_CLEARAGAIN,
  cr_sel                       = SDLK_CRSEL,
  ex_sel                       = SDLK_EXSEL,
  keypad_00                    = SDLK_KP_00,
  keypad_000                   = SDLK_KP_000,
  thousands_separator          = SDLK_THOUSANDSSEPARATOR,
  decimal_separator            = SDLK_DECIMALSEPARATOR,
  currency_unit                = SDLK_CURRENCYUNIT,
  currency_sub_unit            = SDLK_CURRENCYSUBUNIT,
  keypad_left_parenthesis      = SDLK_KP_LEFTPAREN,
  keypad_right_parenthesis     = SDLK_KP_RIGHTPAREN,
  keypad_left_brace            = SDLK_KP_LEFTBRACE,
  keypad_right_brace           = SDLK_KP_RIGHTBRACE,
  keypad_tab                   = SDLK_KP_TAB,
  keypad_backspace             = SDLK_KP_BACKSPACE,
  keypad_a                     = SDLK_KP_A,
  keypad_b                     = SDLK_KP_B,
  keypad_c                     = SDLK_KP_C,
  keypad_d                     = SDLK_KP_D,
  keypad_e                     = SDLK_KP_E,
  keypad_f                     = SDLK_KP_F,
  keypad_xor                   = SDLK_KP_XOR,
  keypad_power                 = SDLK_KP_POWER,
  keypad_percent               = SDLK_KP_PERCENT,
  keypad_less                  = SDLK_KP_LESS,
  keypad_greater               = SDLK_KP_GREATER,
  keypad_ampersand             = SDLK_KP_AMPERSAND,
  keypad_double_ampersand      = SDLK_KP_DBLAMPERSAND,
  keypad_vertical_bar          = SDLK_KP_VERTICALBAR,
  keypad_double_vertical_bar   = SDLK_KP_DBLVERTICALBAR,
  keypad_colon                 = SDLK_KP_COLON,
  keypad_hash                  = SDLK_KP_HASH,
  keypad_space                 = SDLK_KP_SPACE,
  keypad_at                    = SDLK_KP_AT,
  keypad_exclamation           = SDLK_KP_EXCLAM,
  keypad_mem_store             = SDLK_KP_MEMSTORE,
  keypad_mem_recall            = SDLK_KP_MEMRECALL,
  keypad_mem_clear             = SDLK_KP_MEMCLEAR,
  keypad_mem_add               = SDLK_KP_MEMADD,
  keypad_mem_subtract          = SDLK_KP_MEMSUBTRACT,
  keypad_mem_multiply          = SDLK_KP_MEMMULTIPLY,
  keypad_mem_divide            = SDLK_KP_MEMDIVIDE,
  keypad_plus_minus            = SDLK_KP_PLUSMINUS,
  keypad_clear                 = SDLK_KP_CLEAR,
  keypad_clear_entry           = SDLK_KP_CLEARENTRY,
  keypad_binary                = SDLK_KP_BINARY,
  keypad_octal                 = SDLK_KP_OCTAL,
  keypad_decimal               = SDLK_KP_DECIMAL,
  keypad_hexadecimal           = SDLK_KP_HEXADECIMAL,
  left_ctrl                    = SDLK_LCTRL,
  left_shift                   = SDLK_LSHIFT,
  left_alt                     = SDLK_LALT,
  left_gui                     = SDLK_LGUI,
  right_ctrl                   = SDLK_RCTRL,
  right_shift                  = SDLK_RSHIFT,
  right_alt                    = SDLK_RALT,
  right_gui                    = SDLK_RGUI,
  mode                         = SDLK_MODE,
  audio_next                   = SDLK_AUDIONEXT,
  audio_prev                   = SDLK_AUDIOPREV,
  audio_stop                   = SDLK_AUDIOSTOP,
  audio_play                   = SDLK_AUDIOPLAY,
  audio_mute                   = SDLK_AUDIOMUTE,
  media_select                 = SDLK_MEDIASELECT,
  www                          = SDLK_WWW,
  mail                         = SDLK_MAIL,
  calculator                   = SDLK_CALCULATOR,
  computer                     = SDLK_COMPUTER,
  ac_search                    = SDLK_AC_SEARCH,
  ac_home                      = SDLK_AC_HOME,
  ac_back                      = SDLK_AC_BACK,
  ac_forward                   = SDLK_AC_FORWARD,
  ac_stop                      = SDLK_AC_STOP,
  ac_refresh                   = SDLK_AC_REFRESH,
  ac_bookmarks                 = SDLK_AC_BOOKMARKS,
  brightness_down              = SDLK_BRIGHTNESSDOWN,
  brightness_up                = SDLK_BRIGHTNESSUP,
  display_switch               = SDLK_DISPLAYSWITCH,
  keyboard_illumination_toggle = SDLK_KBDILLUMTOGGLE,
  keyboard_illumination_down   = SDLK_KBDILLUMDOWN,
  keyboard_illumination_up     = SDLK_KBDILLUMUP,
  eject                        = SDLK_EJECT,
  sleep                        = SDLK_SLEEP,
  app_1                        = SDLK_APP1,
  app_2                        = SDLK_APP2,
  audio_rewind                 = SDLK_AUDIOREWIND,
  audio_fast_forward           = SDLK_AUDIOFASTFORWARD,
  soft_left                    = SDLK_SOFTLEFT,
  soft_right                   = SDLK_SOFTRIGHT,
  call                         = SDLK_CALL,
  end_call                     = SDLK_ENDCALL

};
enum class key_mod
{
  none        = KMOD_NONE,
  left_shift  = KMOD_LSHIFT,
  right_shift = KMOD_RSHIFT,
  left_ctrl   = KMOD_LCTRL,
  right_ctrl  = KMOD_RCTRL,
  left_alt    = KMOD_LALT,
  right_alt   = KMOD_RALT,
  left_gui    = KMOD_LGUI,
  right_gui   = KMOD_RGUI,
  num_lock    = KMOD_NUM,
  caps_lock   = KMOD_CAPS,
  mode        = KMOD_MODE,
  scroll_lock = KMOD_SCROLL,
  ctrl        = KMOD_CTRL,
  shift       = KMOD_SHIFT,
  alt         = KMOD_ALT,
  gui         = KMOD_GUI,
  reserved    = KMOD_RESERVED
};

template <>
struct is_bitset_enum<key_mod> : std::true_type {};

constexpr key_code scan_code_to_key_code(const scan_code code)
{
  return static_cast<key_code>(SDL_SCANCODE_TO_KEYCODE(static_cast<SDL_Scancode>(code)));
}
}